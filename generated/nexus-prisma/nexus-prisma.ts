/**
 * This file was automatically generated by nexus-prisma@0.3.5
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Player: PlayerObject
      Realm: RealmObject
      PlayerConnection: PlayerConnectionObject
      PageInfo: PageInfoObject
      PlayerEdge: PlayerEdgeObject
      AggregatePlayer: AggregatePlayerObject
      RealmConnection: RealmConnectionObject
      RealmEdge: RealmEdgeObject
      AggregateRealm: AggregateRealmObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      PlayerSubscriptionPayload: PlayerSubscriptionPayloadObject
      PlayerPreviousValues: PlayerPreviousValuesObject
      RealmSubscriptionPayload: RealmSubscriptionPayloadObject
      RealmPreviousValues: RealmPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Player: PlayerFieldDetails
      Realm: RealmFieldDetails
      PlayerConnection: PlayerConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      PlayerEdge: PlayerEdgeFieldDetails
      AggregatePlayer: AggregatePlayerFieldDetails
      RealmConnection: RealmConnectionFieldDetails
      RealmEdge: RealmEdgeFieldDetails
      AggregateRealm: AggregateRealmFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      PlayerSubscriptionPayload: PlayerSubscriptionPayloadFieldDetails
      PlayerPreviousValues: PlayerPreviousValuesFieldDetails
      RealmSubscriptionPayload: RealmSubscriptionPayloadFieldDetails
      RealmPreviousValues: RealmPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      PlayerWhereUniqueInput: PlayerWhereUniqueInputInputObject
      PlayerWhereInput: PlayerWhereInputInputObject
      RealmWhereInput: RealmWhereInputInputObject
      RealmWhereUniqueInput: RealmWhereUniqueInputInputObject
      PlayerCreateInput: PlayerCreateInputInputObject
      RealmCreateOneWithoutPopulationInput: RealmCreateOneWithoutPopulationInputInputObject
      RealmCreateWithoutPopulationInput: RealmCreateWithoutPopulationInputInputObject
      PlayerUpdateInput: PlayerUpdateInputInputObject
      RealmUpdateOneRequiredWithoutPopulationInput: RealmUpdateOneRequiredWithoutPopulationInputInputObject
      RealmUpdateWithoutPopulationDataInput: RealmUpdateWithoutPopulationDataInputInputObject
      RealmUpsertWithoutPopulationInput: RealmUpsertWithoutPopulationInputInputObject
      PlayerUpdateManyMutationInput: PlayerUpdateManyMutationInputInputObject
      RealmCreateInput: RealmCreateInputInputObject
      PlayerCreateManyWithoutRealmInput: PlayerCreateManyWithoutRealmInputInputObject
      PlayerCreateWithoutRealmInput: PlayerCreateWithoutRealmInputInputObject
      RealmUpdateInput: RealmUpdateInputInputObject
      PlayerUpdateManyWithoutRealmInput: PlayerUpdateManyWithoutRealmInputInputObject
      PlayerUpdateWithWhereUniqueWithoutRealmInput: PlayerUpdateWithWhereUniqueWithoutRealmInputInputObject
      PlayerUpdateWithoutRealmDataInput: PlayerUpdateWithoutRealmDataInputInputObject
      PlayerUpsertWithWhereUniqueWithoutRealmInput: PlayerUpsertWithWhereUniqueWithoutRealmInputInputObject
      PlayerScalarWhereInput: PlayerScalarWhereInputInputObject
      PlayerUpdateManyWithWhereNestedInput: PlayerUpdateManyWithWhereNestedInputInputObject
      PlayerUpdateManyDataInput: PlayerUpdateManyDataInputInputObject
      RealmUpdateManyMutationInput: RealmUpdateManyMutationInputInputObject
      PlayerSubscriptionWhereInput: PlayerSubscriptionWhereInputInputObject
      RealmSubscriptionWhereInput: RealmSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    PlayerOrderByInput: PlayerOrderByInputValues,
    RealmOrderByInput: RealmOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'player', args?: QueryPlayerArgs[] | false, alias?: string  } 
  | { name: 'players', args?: QueryPlayersArgs[] | false, alias?: string  } 
  | { name: 'playersConnection', args?: QueryPlayersConnectionArgs[] | false, alias?: string  } 
  | { name: 'realm', args?: QueryRealmArgs[] | false, alias?: string  } 
  | { name: 'realms', args?: QueryRealmsArgs[] | false, alias?: string  } 
  | { name: 'realmsConnection', args?: QueryRealmsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'player'
  | 'players'
  | 'playersConnection'
  | 'realm'
  | 'realms'
  | 'realmsConnection'


type QueryPlayerArgs =
  | 'where'
type QueryPlayersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPlayersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryRealmArgs =
  | 'where'
type QueryRealmsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryRealmsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  player: {
    type: 'Player'
    args: Record<QueryPlayerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PlayerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player | null> | prisma.Player | null
  }
  players: {
    type: 'Player'
    args: Record<QueryPlayersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PlayerWhereInput | null, orderBy?: prisma.PlayerOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player[]> | prisma.Player[]
  }
  playersConnection: {
    type: 'PlayerConnection'
    args: Record<QueryPlayersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PlayerWhereInput | null, orderBy?: prisma.PlayerOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PlayerConnection> | prisma.PlayerConnection
  }
  realm: {
    type: 'Realm'
    args: Record<QueryRealmArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: RealmWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Realm | null> | prisma.Realm | null
  }
  realms: {
    type: 'Realm'
    args: Record<QueryRealmsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: RealmWhereInput | null, orderBy?: prisma.RealmOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Realm[]> | prisma.Realm[]
  }
  realmsConnection: {
    type: 'RealmConnection'
    args: Record<QueryRealmsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: RealmWhereInput | null, orderBy?: prisma.RealmOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RealmConnection> | prisma.RealmConnection
  }
}
  

// Types for Player

type PlayerObject =
  | PlayerFields
  | { name: '_id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'wins', args?: [] | false, alias?: string  } 
  | { name: 'losses', args?: [] | false, alias?: string  } 
  | { name: 'race', args?: [] | false, alias?: string  } 
  | { name: 'realm', args?: [] | false, alias?: string  } 

type PlayerFields =
  | '_id'
  | 'name'
  | 'wins'
  | 'losses'
  | 'race'
  | 'realm'



  

export interface PlayerFieldDetails {
  _id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  wins: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  losses: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  race: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  realm: {
    type: 'Realm'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Player">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Realm> | prisma.Realm
  }
}
  

// Types for Realm

type RealmObject =
  | RealmFields
  | { name: '_id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'population', args?: RealmPopulationArgs[] | false, alias?: string  } 

type RealmFields =
  | '_id'
  | 'name'
  | 'population'


type RealmPopulationArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface RealmFieldDetails {
  _id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  population: {
    type: 'Player'
    args: Record<RealmPopulationArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Realm">,
      args: { where?: PlayerWhereInput | null, orderBy?: prisma.PlayerOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player[]> | prisma.Player[]
  }
}
  

// Types for PlayerConnection

type PlayerConnectionObject =
  | PlayerConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PlayerConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PlayerConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PlayerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PlayerEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PlayerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PlayerEdge[]> | prisma.PlayerEdge[]
  }
  aggregate: {
    type: 'AggregatePlayer'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PlayerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePlayer> | prisma.AggregatePlayer
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for PlayerEdge

type PlayerEdgeObject =
  | PlayerEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PlayerEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PlayerEdgeFieldDetails {
  node: {
    type: 'Player'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PlayerEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player> | prisma.Player
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePlayer

type AggregatePlayerObject =
  | AggregatePlayerFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePlayerFields =
  | 'count'



  

export interface AggregatePlayerFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for RealmConnection

type RealmConnectionObject =
  | RealmConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type RealmConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface RealmConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RealmConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'RealmEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"RealmConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RealmEdge[]> | prisma.RealmEdge[]
  }
  aggregate: {
    type: 'AggregateRealm'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RealmConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateRealm> | prisma.AggregateRealm
  }
}
  

// Types for RealmEdge

type RealmEdgeObject =
  | RealmEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type RealmEdgeFields =
  | 'node'
  | 'cursor'



  

export interface RealmEdgeFieldDetails {
  node: {
    type: 'Realm'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RealmEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Realm> | prisma.Realm
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateRealm

type AggregateRealmObject =
  | AggregateRealmFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateRealmFields =
  | 'count'



  

export interface AggregateRealmFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createPlayer', args?: MutationCreatePlayerArgs[] | false, alias?: string  } 
  | { name: 'updatePlayer', args?: MutationUpdatePlayerArgs[] | false, alias?: string  } 
  | { name: 'updateManyPlayers', args?: MutationUpdateManyPlayersArgs[] | false, alias?: string  } 
  | { name: 'upsertPlayer', args?: MutationUpsertPlayerArgs[] | false, alias?: string  } 
  | { name: 'deletePlayer', args?: MutationDeletePlayerArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPlayers', args?: MutationDeleteManyPlayersArgs[] | false, alias?: string  } 
  | { name: 'createRealm', args?: MutationCreateRealmArgs[] | false, alias?: string  } 
  | { name: 'updateRealm', args?: MutationUpdateRealmArgs[] | false, alias?: string  } 
  | { name: 'updateManyRealms', args?: MutationUpdateManyRealmsArgs[] | false, alias?: string  } 
  | { name: 'upsertRealm', args?: MutationUpsertRealmArgs[] | false, alias?: string  } 
  | { name: 'deleteRealm', args?: MutationDeleteRealmArgs[] | false, alias?: string  } 
  | { name: 'deleteManyRealms', args?: MutationDeleteManyRealmsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createPlayer'
  | 'updatePlayer'
  | 'updateManyPlayers'
  | 'upsertPlayer'
  | 'deletePlayer'
  | 'deleteManyPlayers'
  | 'createRealm'
  | 'updateRealm'
  | 'updateManyRealms'
  | 'upsertRealm'
  | 'deleteRealm'
  | 'deleteManyRealms'


type MutationCreatePlayerArgs =
  | 'data'
type MutationUpdatePlayerArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPlayersArgs =
  | 'data'
  | 'where'
type MutationUpsertPlayerArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePlayerArgs =
  | 'where'
type MutationDeleteManyPlayersArgs =
  | 'where'
type MutationCreateRealmArgs =
  | 'data'
type MutationUpdateRealmArgs =
  | 'data'
  | 'where'
type MutationUpdateManyRealmsArgs =
  | 'data'
  | 'where'
type MutationUpsertRealmArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteRealmArgs =
  | 'where'
type MutationDeleteManyRealmsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createPlayer: {
    type: 'Player'
    args: Record<MutationCreatePlayerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PlayerCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player> | prisma.Player
  }
  updatePlayer: {
    type: 'Player'
    args: Record<MutationUpdatePlayerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PlayerUpdateInput, where: PlayerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player | null> | prisma.Player | null
  }
  updateManyPlayers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPlayersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PlayerUpdateManyMutationInput, where?: PlayerWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPlayer: {
    type: 'Player'
    args: Record<MutationUpsertPlayerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PlayerWhereUniqueInput, create: PlayerCreateInput, update: PlayerUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player> | prisma.Player
  }
  deletePlayer: {
    type: 'Player'
    args: Record<MutationDeletePlayerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PlayerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player | null> | prisma.Player | null
  }
  deleteManyPlayers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPlayersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PlayerWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createRealm: {
    type: 'Realm'
    args: Record<MutationCreateRealmArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: RealmCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Realm> | prisma.Realm
  }
  updateRealm: {
    type: 'Realm'
    args: Record<MutationUpdateRealmArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: RealmUpdateInput, where: RealmWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Realm | null> | prisma.Realm | null
  }
  updateManyRealms: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyRealmsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: RealmUpdateManyMutationInput, where?: RealmWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertRealm: {
    type: 'Realm'
    args: Record<MutationUpsertRealmArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: RealmWhereUniqueInput, create: RealmCreateInput, update: RealmUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Realm> | prisma.Realm
  }
  deleteRealm: {
    type: 'Realm'
    args: Record<MutationDeleteRealmArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: RealmWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Realm | null> | prisma.Realm | null
  }
  deleteManyRealms: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyRealmsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: RealmWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'player', args?: SubscriptionPlayerArgs[] | false, alias?: string  } 
  | { name: 'realm', args?: SubscriptionRealmArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'player'
  | 'realm'


type SubscriptionPlayerArgs =
  | 'where'
type SubscriptionRealmArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  player: {
    type: 'PlayerSubscriptionPayload'
    args: Record<SubscriptionPlayerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PlayerSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PlayerSubscriptionPayload | null> | prisma.PlayerSubscriptionPayload | null
  }
  realm: {
    type: 'RealmSubscriptionPayload'
    args: Record<SubscriptionRealmArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: RealmSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RealmSubscriptionPayload | null> | prisma.RealmSubscriptionPayload | null
  }
}
  

// Types for PlayerSubscriptionPayload

type PlayerSubscriptionPayloadObject =
  | PlayerSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PlayerSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PlayerSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PlayerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Player'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PlayerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Player | null> | prisma.Player | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PlayerPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PlayerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PlayerPreviousValues | null> | prisma.PlayerPreviousValues | null
  }
}
  

// Types for PlayerPreviousValues

type PlayerPreviousValuesObject =
  | PlayerPreviousValuesFields
  | { name: '_id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'wins', args?: [] | false, alias?: string  } 
  | { name: 'losses', args?: [] | false, alias?: string  } 
  | { name: 'race', args?: [] | false, alias?: string  } 

type PlayerPreviousValuesFields =
  | '_id'
  | 'name'
  | 'wins'
  | 'losses'
  | 'race'



  

export interface PlayerPreviousValuesFieldDetails {
  _id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  wins: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  losses: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  race: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for RealmSubscriptionPayload

type RealmSubscriptionPayloadObject =
  | RealmSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type RealmSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface RealmSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RealmSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Realm'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"RealmSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Realm | null> | prisma.Realm | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'RealmPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"RealmSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RealmPreviousValues | null> | prisma.RealmPreviousValues | null
  }
}
  

// Types for RealmPreviousValues

type RealmPreviousValuesObject =
  | RealmPreviousValuesFields
  | { name: '_id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type RealmPreviousValuesFields =
  | '_id'
  | 'name'



  

export interface RealmPreviousValuesFieldDetails {
  _id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface PlayerWhereUniqueInput {
  _id?: string | null
}
export type PlayerWhereUniqueInputInputObject =
  | Extract<keyof PlayerWhereUniqueInput, string>
  | { name: '_id', alias?: string  } 
  
export interface PlayerWhereInput {
  _id?: string | null
  _id_not?: string | null
  _id_in?: string[]
  _id_not_in?: string[]
  _id_lt?: string | null
  _id_lte?: string | null
  _id_gt?: string | null
  _id_gte?: string | null
  _id_contains?: string | null
  _id_not_contains?: string | null
  _id_starts_with?: string | null
  _id_not_starts_with?: string | null
  _id_ends_with?: string | null
  _id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  wins?: number | null
  wins_not?: number | null
  wins_in?: number[]
  wins_not_in?: number[]
  wins_lt?: number | null
  wins_lte?: number | null
  wins_gt?: number | null
  wins_gte?: number | null
  losses?: number | null
  losses_not?: number | null
  losses_in?: number[]
  losses_not_in?: number[]
  losses_lt?: number | null
  losses_lte?: number | null
  losses_gt?: number | null
  losses_gte?: number | null
  race?: string | null
  race_not?: string | null
  race_in?: string[]
  race_not_in?: string[]
  race_lt?: string | null
  race_lte?: string | null
  race_gt?: string | null
  race_gte?: string | null
  race_contains?: string | null
  race_not_contains?: string | null
  race_starts_with?: string | null
  race_not_starts_with?: string | null
  race_ends_with?: string | null
  race_not_ends_with?: string | null
  realm?: RealmWhereInput | null
  AND?: PlayerWhereInput[]
}
export type PlayerWhereInputInputObject =
  | Extract<keyof PlayerWhereInput, string>
  | { name: '_id', alias?: string  } 
  | { name: '_id_not', alias?: string  } 
  | { name: '_id_in', alias?: string  } 
  | { name: '_id_not_in', alias?: string  } 
  | { name: '_id_lt', alias?: string  } 
  | { name: '_id_lte', alias?: string  } 
  | { name: '_id_gt', alias?: string  } 
  | { name: '_id_gte', alias?: string  } 
  | { name: '_id_contains', alias?: string  } 
  | { name: '_id_not_contains', alias?: string  } 
  | { name: '_id_starts_with', alias?: string  } 
  | { name: '_id_not_starts_with', alias?: string  } 
  | { name: '_id_ends_with', alias?: string  } 
  | { name: '_id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'wins', alias?: string  } 
  | { name: 'wins_not', alias?: string  } 
  | { name: 'wins_in', alias?: string  } 
  | { name: 'wins_not_in', alias?: string  } 
  | { name: 'wins_lt', alias?: string  } 
  | { name: 'wins_lte', alias?: string  } 
  | { name: 'wins_gt', alias?: string  } 
  | { name: 'wins_gte', alias?: string  } 
  | { name: 'losses', alias?: string  } 
  | { name: 'losses_not', alias?: string  } 
  | { name: 'losses_in', alias?: string  } 
  | { name: 'losses_not_in', alias?: string  } 
  | { name: 'losses_lt', alias?: string  } 
  | { name: 'losses_lte', alias?: string  } 
  | { name: 'losses_gt', alias?: string  } 
  | { name: 'losses_gte', alias?: string  } 
  | { name: 'race', alias?: string  } 
  | { name: 'race_not', alias?: string  } 
  | { name: 'race_in', alias?: string  } 
  | { name: 'race_not_in', alias?: string  } 
  | { name: 'race_lt', alias?: string  } 
  | { name: 'race_lte', alias?: string  } 
  | { name: 'race_gt', alias?: string  } 
  | { name: 'race_gte', alias?: string  } 
  | { name: 'race_contains', alias?: string  } 
  | { name: 'race_not_contains', alias?: string  } 
  | { name: 'race_starts_with', alias?: string  } 
  | { name: 'race_not_starts_with', alias?: string  } 
  | { name: 'race_ends_with', alias?: string  } 
  | { name: 'race_not_ends_with', alias?: string  } 
  | { name: 'realm', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface RealmWhereInput {
  _id?: string | null
  _id_not?: string | null
  _id_in?: string[]
  _id_not_in?: string[]
  _id_lt?: string | null
  _id_lte?: string | null
  _id_gt?: string | null
  _id_gte?: string | null
  _id_contains?: string | null
  _id_not_contains?: string | null
  _id_starts_with?: string | null
  _id_not_starts_with?: string | null
  _id_ends_with?: string | null
  _id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  population_some?: PlayerWhereInput | null
  AND?: RealmWhereInput[]
}
export type RealmWhereInputInputObject =
  | Extract<keyof RealmWhereInput, string>
  | { name: '_id', alias?: string  } 
  | { name: '_id_not', alias?: string  } 
  | { name: '_id_in', alias?: string  } 
  | { name: '_id_not_in', alias?: string  } 
  | { name: '_id_lt', alias?: string  } 
  | { name: '_id_lte', alias?: string  } 
  | { name: '_id_gt', alias?: string  } 
  | { name: '_id_gte', alias?: string  } 
  | { name: '_id_contains', alias?: string  } 
  | { name: '_id_not_contains', alias?: string  } 
  | { name: '_id_starts_with', alias?: string  } 
  | { name: '_id_not_starts_with', alias?: string  } 
  | { name: '_id_ends_with', alias?: string  } 
  | { name: '_id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'population_some', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface RealmWhereUniqueInput {
  _id?: string | null
}
export type RealmWhereUniqueInputInputObject =
  | Extract<keyof RealmWhereUniqueInput, string>
  | { name: '_id', alias?: string  } 
  
export interface PlayerCreateInput {
  name?: string
  wins?: number
  losses?: number
  race?: string
  realm?: RealmCreateOneWithoutPopulationInput
}
export type PlayerCreateInputInputObject =
  | Extract<keyof PlayerCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'wins', alias?: string  } 
  | { name: 'losses', alias?: string  } 
  | { name: 'race', alias?: string  } 
  | { name: 'realm', alias?: string  } 
  
export interface RealmCreateOneWithoutPopulationInput {
  create?: RealmCreateWithoutPopulationInput | null
  connect?: RealmWhereUniqueInput | null
}
export type RealmCreateOneWithoutPopulationInputInputObject =
  | Extract<keyof RealmCreateOneWithoutPopulationInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface RealmCreateWithoutPopulationInput {
  name?: string
}
export type RealmCreateWithoutPopulationInputInputObject =
  | Extract<keyof RealmCreateWithoutPopulationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface PlayerUpdateInput {
  name?: string | null
  wins?: number | null
  losses?: number | null
  race?: string | null
  realm?: RealmUpdateOneRequiredWithoutPopulationInput | null
}
export type PlayerUpdateInputInputObject =
  | Extract<keyof PlayerUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'wins', alias?: string  } 
  | { name: 'losses', alias?: string  } 
  | { name: 'race', alias?: string  } 
  | { name: 'realm', alias?: string  } 
  
export interface RealmUpdateOneRequiredWithoutPopulationInput {
  create?: RealmCreateWithoutPopulationInput | null
  update?: RealmUpdateWithoutPopulationDataInput | null
  upsert?: RealmUpsertWithoutPopulationInput | null
  connect?: RealmWhereUniqueInput | null
}
export type RealmUpdateOneRequiredWithoutPopulationInputInputObject =
  | Extract<keyof RealmUpdateOneRequiredWithoutPopulationInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface RealmUpdateWithoutPopulationDataInput {
  name?: string | null
}
export type RealmUpdateWithoutPopulationDataInputInputObject =
  | Extract<keyof RealmUpdateWithoutPopulationDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface RealmUpsertWithoutPopulationInput {
  update?: RealmUpdateWithoutPopulationDataInput
  create?: RealmCreateWithoutPopulationInput
}
export type RealmUpsertWithoutPopulationInputInputObject =
  | Extract<keyof RealmUpsertWithoutPopulationInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PlayerUpdateManyMutationInput {
  name?: string | null
  wins?: number | null
  losses?: number | null
  race?: string | null
}
export type PlayerUpdateManyMutationInputInputObject =
  | Extract<keyof PlayerUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'wins', alias?: string  } 
  | { name: 'losses', alias?: string  } 
  | { name: 'race', alias?: string  } 
  
export interface RealmCreateInput {
  name?: string
  population?: PlayerCreateManyWithoutRealmInput | null
}
export type RealmCreateInputInputObject =
  | Extract<keyof RealmCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'population', alias?: string  } 
  
export interface PlayerCreateManyWithoutRealmInput {
  create?: PlayerCreateWithoutRealmInput[]
  connect?: PlayerWhereUniqueInput[]
}
export type PlayerCreateManyWithoutRealmInputInputObject =
  | Extract<keyof PlayerCreateManyWithoutRealmInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PlayerCreateWithoutRealmInput {
  name?: string
  wins?: number
  losses?: number
  race?: string
}
export type PlayerCreateWithoutRealmInputInputObject =
  | Extract<keyof PlayerCreateWithoutRealmInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'wins', alias?: string  } 
  | { name: 'losses', alias?: string  } 
  | { name: 'race', alias?: string  } 
  
export interface RealmUpdateInput {
  name?: string | null
  population?: PlayerUpdateManyWithoutRealmInput | null
}
export type RealmUpdateInputInputObject =
  | Extract<keyof RealmUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'population', alias?: string  } 
  
export interface PlayerUpdateManyWithoutRealmInput {
  create?: PlayerCreateWithoutRealmInput[]
  delete?: PlayerWhereUniqueInput[]
  connect?: PlayerWhereUniqueInput[]
  set?: PlayerWhereUniqueInput[]
  disconnect?: PlayerWhereUniqueInput[]
  update?: PlayerUpdateWithWhereUniqueWithoutRealmInput[]
  upsert?: PlayerUpsertWithWhereUniqueWithoutRealmInput[]
  deleteMany?: PlayerScalarWhereInput[]
  updateMany?: PlayerUpdateManyWithWhereNestedInput[]
}
export type PlayerUpdateManyWithoutRealmInputInputObject =
  | Extract<keyof PlayerUpdateManyWithoutRealmInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface PlayerUpdateWithWhereUniqueWithoutRealmInput {
  where?: PlayerWhereUniqueInput
  data?: PlayerUpdateWithoutRealmDataInput
}
export type PlayerUpdateWithWhereUniqueWithoutRealmInputInputObject =
  | Extract<keyof PlayerUpdateWithWhereUniqueWithoutRealmInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PlayerUpdateWithoutRealmDataInput {
  name?: string | null
  wins?: number | null
  losses?: number | null
  race?: string | null
}
export type PlayerUpdateWithoutRealmDataInputInputObject =
  | Extract<keyof PlayerUpdateWithoutRealmDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'wins', alias?: string  } 
  | { name: 'losses', alias?: string  } 
  | { name: 'race', alias?: string  } 
  
export interface PlayerUpsertWithWhereUniqueWithoutRealmInput {
  where?: PlayerWhereUniqueInput
  update?: PlayerUpdateWithoutRealmDataInput
  create?: PlayerCreateWithoutRealmInput
}
export type PlayerUpsertWithWhereUniqueWithoutRealmInputInputObject =
  | Extract<keyof PlayerUpsertWithWhereUniqueWithoutRealmInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PlayerScalarWhereInput {
  _id?: string | null
  _id_not?: string | null
  _id_in?: string[]
  _id_not_in?: string[]
  _id_lt?: string | null
  _id_lte?: string | null
  _id_gt?: string | null
  _id_gte?: string | null
  _id_contains?: string | null
  _id_not_contains?: string | null
  _id_starts_with?: string | null
  _id_not_starts_with?: string | null
  _id_ends_with?: string | null
  _id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  wins?: number | null
  wins_not?: number | null
  wins_in?: number[]
  wins_not_in?: number[]
  wins_lt?: number | null
  wins_lte?: number | null
  wins_gt?: number | null
  wins_gte?: number | null
  losses?: number | null
  losses_not?: number | null
  losses_in?: number[]
  losses_not_in?: number[]
  losses_lt?: number | null
  losses_lte?: number | null
  losses_gt?: number | null
  losses_gte?: number | null
  race?: string | null
  race_not?: string | null
  race_in?: string[]
  race_not_in?: string[]
  race_lt?: string | null
  race_lte?: string | null
  race_gt?: string | null
  race_gte?: string | null
  race_contains?: string | null
  race_not_contains?: string | null
  race_starts_with?: string | null
  race_not_starts_with?: string | null
  race_ends_with?: string | null
  race_not_ends_with?: string | null
  AND?: PlayerScalarWhereInput[]
  OR?: PlayerScalarWhereInput[]
  NOT?: PlayerScalarWhereInput[]
}
export type PlayerScalarWhereInputInputObject =
  | Extract<keyof PlayerScalarWhereInput, string>
  | { name: '_id', alias?: string  } 
  | { name: '_id_not', alias?: string  } 
  | { name: '_id_in', alias?: string  } 
  | { name: '_id_not_in', alias?: string  } 
  | { name: '_id_lt', alias?: string  } 
  | { name: '_id_lte', alias?: string  } 
  | { name: '_id_gt', alias?: string  } 
  | { name: '_id_gte', alias?: string  } 
  | { name: '_id_contains', alias?: string  } 
  | { name: '_id_not_contains', alias?: string  } 
  | { name: '_id_starts_with', alias?: string  } 
  | { name: '_id_not_starts_with', alias?: string  } 
  | { name: '_id_ends_with', alias?: string  } 
  | { name: '_id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'wins', alias?: string  } 
  | { name: 'wins_not', alias?: string  } 
  | { name: 'wins_in', alias?: string  } 
  | { name: 'wins_not_in', alias?: string  } 
  | { name: 'wins_lt', alias?: string  } 
  | { name: 'wins_lte', alias?: string  } 
  | { name: 'wins_gt', alias?: string  } 
  | { name: 'wins_gte', alias?: string  } 
  | { name: 'losses', alias?: string  } 
  | { name: 'losses_not', alias?: string  } 
  | { name: 'losses_in', alias?: string  } 
  | { name: 'losses_not_in', alias?: string  } 
  | { name: 'losses_lt', alias?: string  } 
  | { name: 'losses_lte', alias?: string  } 
  | { name: 'losses_gt', alias?: string  } 
  | { name: 'losses_gte', alias?: string  } 
  | { name: 'race', alias?: string  } 
  | { name: 'race_not', alias?: string  } 
  | { name: 'race_in', alias?: string  } 
  | { name: 'race_not_in', alias?: string  } 
  | { name: 'race_lt', alias?: string  } 
  | { name: 'race_lte', alias?: string  } 
  | { name: 'race_gt', alias?: string  } 
  | { name: 'race_gte', alias?: string  } 
  | { name: 'race_contains', alias?: string  } 
  | { name: 'race_not_contains', alias?: string  } 
  | { name: 'race_starts_with', alias?: string  } 
  | { name: 'race_not_starts_with', alias?: string  } 
  | { name: 'race_ends_with', alias?: string  } 
  | { name: 'race_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PlayerUpdateManyWithWhereNestedInput {
  where?: PlayerScalarWhereInput
  data?: PlayerUpdateManyDataInput
}
export type PlayerUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof PlayerUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PlayerUpdateManyDataInput {
  name?: string | null
  wins?: number | null
  losses?: number | null
  race?: string | null
}
export type PlayerUpdateManyDataInputInputObject =
  | Extract<keyof PlayerUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'wins', alias?: string  } 
  | { name: 'losses', alias?: string  } 
  | { name: 'race', alias?: string  } 
  
export interface RealmUpdateManyMutationInput {
  name?: string | null
}
export type RealmUpdateManyMutationInputInputObject =
  | Extract<keyof RealmUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface PlayerSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PlayerWhereInput | null
  AND?: PlayerSubscriptionWhereInput[]
}
export type PlayerSubscriptionWhereInputInputObject =
  | Extract<keyof PlayerSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  
export interface RealmSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: RealmWhereInput | null
  AND?: RealmSubscriptionWhereInput[]
}
export type RealmSubscriptionWhereInputInputObject =
  | Extract<keyof RealmSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  

export type PlayerOrderByInputValues =
  | '_id_ASC'
  | '_id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'wins_ASC'
  | 'wins_DESC'
  | 'losses_ASC'
  | 'losses_DESC'
  | 'race_ASC'
  | 'race_DESC'
  
export type RealmOrderByInputValues =
  | '_id_ASC'
  | '_id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  
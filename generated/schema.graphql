### This file was autogenerated by Nexus 0.11.6
### Do not make changes to this file directly


type Mutation {
  createPlayer(data: PlayerCreateInput!): Player!
  createRealm(data: RealmCreateInput!): Realm!
  deletePlayer(where: PlayerWhereUniqueInput!): Player
  deleteRealm(where: RealmWhereUniqueInput!): Realm
  updatePlayer(data: PlayerUpdateInput!, where: PlayerWhereUniqueInput!): Player
  updateRealm(data: RealmUpdateInput!, where: RealmWhereUniqueInput!): Realm
  upsertPlayer(create: PlayerCreateInput!, update: PlayerUpdateInput!, where: PlayerWhereUniqueInput!): Player!
}

type Player {
  _id: ID!
  losses: Int!
  name: String!
  race: String!
  realm: Realm!
  wins: Int!
}

input PlayerCreateInput {
  losses: Int!
  name: String!
  race: String!
  realm: RealmCreateOneWithoutPopulationInput!
  wins: Int!
}

input PlayerCreateManyWithoutRealmInput {
  connect: [PlayerWhereUniqueInput!]
  create: [PlayerCreateWithoutRealmInput!]
}

input PlayerCreateWithoutRealmInput {
  losses: Int!
  name: String!
  race: String!
  wins: Int!
}

enum PlayerOrderByInput {
  _id_ASC
  _id_DESC
  losses_ASC
  losses_DESC
  name_ASC
  name_DESC
  race_ASC
  race_DESC
  wins_ASC
  wins_DESC
}

input PlayerScalarWhereInput {
  _id: ID
  _id_contains: ID
  _id_ends_with: ID
  _id_gt: ID
  _id_gte: ID
  _id_in: [ID!]
  _id_lt: ID
  _id_lte: ID
  _id_not: ID
  _id_not_contains: ID
  _id_not_ends_with: ID
  _id_not_in: [ID!]
  _id_not_starts_with: ID
  _id_starts_with: ID
  AND: [PlayerScalarWhereInput!]
  losses: Int
  losses_gt: Int
  losses_gte: Int
  losses_in: [Int!]
  losses_lt: Int
  losses_lte: Int
  losses_not: Int
  losses_not_in: [Int!]
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [PlayerScalarWhereInput!]
  OR: [PlayerScalarWhereInput!]
  race: String
  race_contains: String
  race_ends_with: String
  race_gt: String
  race_gte: String
  race_in: [String!]
  race_lt: String
  race_lte: String
  race_not: String
  race_not_contains: String
  race_not_ends_with: String
  race_not_in: [String!]
  race_not_starts_with: String
  race_starts_with: String
  wins: Int
  wins_gt: Int
  wins_gte: Int
  wins_in: [Int!]
  wins_lt: Int
  wins_lte: Int
  wins_not: Int
  wins_not_in: [Int!]
}

input PlayerUpdateInput {
  losses: Int
  name: String
  race: String
  realm: RealmUpdateOneRequiredWithoutPopulationInput
  wins: Int
}

input PlayerUpdateManyDataInput {
  losses: Int
  name: String
  race: String
  wins: Int
}

input PlayerUpdateManyWithoutRealmInput {
  connect: [PlayerWhereUniqueInput!]
  create: [PlayerCreateWithoutRealmInput!]
  delete: [PlayerWhereUniqueInput!]
  deleteMany: [PlayerScalarWhereInput!]
  disconnect: [PlayerWhereUniqueInput!]
  set: [PlayerWhereUniqueInput!]
  update: [PlayerUpdateWithWhereUniqueWithoutRealmInput!]
  updateMany: [PlayerUpdateManyWithWhereNestedInput!]
  upsert: [PlayerUpsertWithWhereUniqueWithoutRealmInput!]
}

input PlayerUpdateManyWithWhereNestedInput {
  data: PlayerUpdateManyDataInput!
  where: PlayerScalarWhereInput!
}

input PlayerUpdateWithoutRealmDataInput {
  losses: Int
  name: String
  race: String
  wins: Int
}

input PlayerUpdateWithWhereUniqueWithoutRealmInput {
  data: PlayerUpdateWithoutRealmDataInput!
  where: PlayerWhereUniqueInput!
}

input PlayerUpsertWithWhereUniqueWithoutRealmInput {
  create: PlayerCreateWithoutRealmInput!
  update: PlayerUpdateWithoutRealmDataInput!
  where: PlayerWhereUniqueInput!
}

input PlayerWhereInput {
  _id: ID
  _id_contains: ID
  _id_ends_with: ID
  _id_gt: ID
  _id_gte: ID
  _id_in: [ID!]
  _id_lt: ID
  _id_lte: ID
  _id_not: ID
  _id_not_contains: ID
  _id_not_ends_with: ID
  _id_not_in: [ID!]
  _id_not_starts_with: ID
  _id_starts_with: ID
  AND: [PlayerWhereInput!]
  losses: Int
  losses_gt: Int
  losses_gte: Int
  losses_in: [Int!]
  losses_lt: Int
  losses_lte: Int
  losses_not: Int
  losses_not_in: [Int!]
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  race: String
  race_contains: String
  race_ends_with: String
  race_gt: String
  race_gte: String
  race_in: [String!]
  race_lt: String
  race_lte: String
  race_not: String
  race_not_contains: String
  race_not_ends_with: String
  race_not_in: [String!]
  race_not_starts_with: String
  race_starts_with: String
  realm: RealmWhereInput
  wins: Int
  wins_gt: Int
  wins_gte: Int
  wins_in: [Int!]
  wins_lt: Int
  wins_lte: Int
  wins_not: Int
  wins_not_in: [Int!]
}

input PlayerWhereUniqueInput {
  _id: ID
}

type Query {
  player(where: PlayerWhereUniqueInput!): Player
  players(after: String, before: String, first: Int, last: Int, orderBy: PlayerOrderByInput, skip: Int, where: PlayerWhereInput): [Player!]!
  realm(where: RealmWhereUniqueInput!): Realm
  realms(after: String, before: String, first: Int, last: Int, orderBy: RealmOrderByInput, skip: Int, where: RealmWhereInput): [Realm!]!
}

type Realm {
  _id: ID!
  name: String!
  population(after: String, before: String, first: Int, last: Int, orderBy: PlayerOrderByInput, skip: Int, where: PlayerWhereInput): [Player!]
}

input RealmCreateInput {
  name: String!
  population: PlayerCreateManyWithoutRealmInput
}

input RealmCreateOneWithoutPopulationInput {
  connect: RealmWhereUniqueInput
  create: RealmCreateWithoutPopulationInput
}

input RealmCreateWithoutPopulationInput {
  name: String!
}

enum RealmOrderByInput {
  _id_ASC
  _id_DESC
  name_ASC
  name_DESC
}

input RealmUpdateInput {
  name: String
  population: PlayerUpdateManyWithoutRealmInput
}

input RealmUpdateOneRequiredWithoutPopulationInput {
  connect: RealmWhereUniqueInput
  create: RealmCreateWithoutPopulationInput
  update: RealmUpdateWithoutPopulationDataInput
  upsert: RealmUpsertWithoutPopulationInput
}

input RealmUpdateWithoutPopulationDataInput {
  name: String
}

input RealmUpsertWithoutPopulationInput {
  create: RealmCreateWithoutPopulationInput!
  update: RealmUpdateWithoutPopulationDataInput!
}

input RealmWhereInput {
  _id: ID
  _id_contains: ID
  _id_ends_with: ID
  _id_gt: ID
  _id_gte: ID
  _id_in: [ID!]
  _id_lt: ID
  _id_lte: ID
  _id_not: ID
  _id_not_contains: ID
  _id_not_ends_with: ID
  _id_not_in: [ID!]
  _id_not_starts_with: ID
  _id_starts_with: ID
  AND: [RealmWhereInput!]
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  population_some: PlayerWhereInput
}

input RealmWhereUniqueInput {
  _id: ID
}

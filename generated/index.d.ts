// Code generated by Prisma (prisma@1.28.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  player: (where?: PlayerWhereInput) => Promise<boolean>;
  playerList: (where?: PlayerListWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  player: (where: PlayerWhereUniqueInput) => PlayerPromise;
  players: (
    args?: {
      where?: PlayerWhereInput;
      orderBy?: PlayerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Player>;
  playersConnection: (
    args?: {
      where?: PlayerWhereInput;
      orderBy?: PlayerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PlayerConnectionPromise;
  playerList: (where: PlayerListWhereUniqueInput) => PlayerListPromise;
  playerLists: (
    args?: {
      where?: PlayerListWhereInput;
      orderBy?: PlayerListOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<PlayerList>;
  playerListsConnection: (
    args?: {
      where?: PlayerListWhereInput;
      orderBy?: PlayerListOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PlayerListConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createPlayer: (data: PlayerCreateInput) => PlayerPromise;
  updatePlayer: (
    args: { data: PlayerUpdateInput; where: PlayerWhereUniqueInput }
  ) => PlayerPromise;
  updateManyPlayers: (
    args: { data: PlayerUpdateManyMutationInput; where?: PlayerWhereInput }
  ) => BatchPayloadPromise;
  upsertPlayer: (
    args: {
      where: PlayerWhereUniqueInput;
      create: PlayerCreateInput;
      update: PlayerUpdateInput;
    }
  ) => PlayerPromise;
  deletePlayer: (where: PlayerWhereUniqueInput) => PlayerPromise;
  deleteManyPlayers: (where?: PlayerWhereInput) => BatchPayloadPromise;
  createPlayerList: (data: PlayerListCreateInput) => PlayerListPromise;
  updatePlayerList: (
    args: { data: PlayerListUpdateInput; where: PlayerListWhereUniqueInput }
  ) => PlayerListPromise;
  upsertPlayerList: (
    args: {
      where: PlayerListWhereUniqueInput;
      create: PlayerListCreateInput;
      update: PlayerListUpdateInput;
    }
  ) => PlayerListPromise;
  deletePlayerList: (where: PlayerListWhereUniqueInput) => PlayerListPromise;
  deleteManyPlayerLists: (where?: PlayerListWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  player: (
    where?: PlayerSubscriptionWhereInput
  ) => PlayerSubscriptionPayloadSubscription;
  playerList: (
    where?: PlayerListSubscriptionWhereInput
  ) => PlayerListSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PlayerOrderByInput =
  | "_id_ASC"
  | "_id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "wins_ASC"
  | "wins_DESC"
  | "losses_ASC"
  | "losses_DESC"
  | "race_ASC"
  | "race_DESC";

export type PlayerListOrderByInput = "id_ASC" | "id_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type PlayerWhereUniqueInput = AtLeastOne<{
  _id: ID_Input;
}>;

export interface PlayerWhereInput {
  _id?: ID_Input;
  _id_not?: ID_Input;
  _id_in?: ID_Input[] | ID_Input;
  _id_not_in?: ID_Input[] | ID_Input;
  _id_lt?: ID_Input;
  _id_lte?: ID_Input;
  _id_gt?: ID_Input;
  _id_gte?: ID_Input;
  _id_contains?: ID_Input;
  _id_not_contains?: ID_Input;
  _id_starts_with?: ID_Input;
  _id_not_starts_with?: ID_Input;
  _id_ends_with?: ID_Input;
  _id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  wins?: Int;
  wins_not?: Int;
  wins_in?: Int[] | Int;
  wins_not_in?: Int[] | Int;
  wins_lt?: Int;
  wins_lte?: Int;
  wins_gt?: Int;
  wins_gte?: Int;
  losses?: Int;
  losses_not?: Int;
  losses_in?: Int[] | Int;
  losses_not_in?: Int[] | Int;
  losses_lt?: Int;
  losses_lte?: Int;
  losses_gt?: Int;
  losses_gte?: Int;
  race?: String;
  race_not?: String;
  race_in?: String[] | String;
  race_not_in?: String[] | String;
  race_lt?: String;
  race_lte?: String;
  race_gt?: String;
  race_gte?: String;
  race_contains?: String;
  race_not_contains?: String;
  race_starts_with?: String;
  race_not_starts_with?: String;
  race_ends_with?: String;
  race_not_ends_with?: String;
  AND?: PlayerWhereInput[] | PlayerWhereInput;
}

export type PlayerListWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PlayerListWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  playerList_some?: PlayerWhereInput;
  AND?: PlayerListWhereInput[] | PlayerListWhereInput;
}

export interface PlayerCreateInput {
  name: String;
  wins: Int;
  losses: Int;
  race: String;
}

export interface PlayerUpdateInput {
  name?: String;
  wins?: Int;
  losses?: Int;
  race?: String;
}

export interface PlayerUpdateManyMutationInput {
  name?: String;
  wins?: Int;
  losses?: Int;
  race?: String;
}

export interface PlayerListCreateInput {
  playerList?: PlayerCreateManyInput;
}

export interface PlayerCreateManyInput {
  create?: PlayerCreateInput[] | PlayerCreateInput;
  connect?: PlayerWhereUniqueInput[] | PlayerWhereUniqueInput;
}

export interface PlayerListUpdateInput {
  playerList?: PlayerUpdateManyInput;
}

export interface PlayerUpdateManyInput {
  create?: PlayerCreateInput[] | PlayerCreateInput;
  update?:
    | PlayerUpdateWithWhereUniqueNestedInput[]
    | PlayerUpdateWithWhereUniqueNestedInput;
  upsert?:
    | PlayerUpsertWithWhereUniqueNestedInput[]
    | PlayerUpsertWithWhereUniqueNestedInput;
  delete?: PlayerWhereUniqueInput[] | PlayerWhereUniqueInput;
  connect?: PlayerWhereUniqueInput[] | PlayerWhereUniqueInput;
  set?: PlayerWhereUniqueInput[] | PlayerWhereUniqueInput;
  disconnect?: PlayerWhereUniqueInput[] | PlayerWhereUniqueInput;
  deleteMany?: PlayerScalarWhereInput[] | PlayerScalarWhereInput;
  updateMany?:
    | PlayerUpdateManyWithWhereNestedInput[]
    | PlayerUpdateManyWithWhereNestedInput;
}

export interface PlayerUpdateWithWhereUniqueNestedInput {
  where: PlayerWhereUniqueInput;
  data: PlayerUpdateDataInput;
}

export interface PlayerUpdateDataInput {
  name?: String;
  wins?: Int;
  losses?: Int;
  race?: String;
}

export interface PlayerUpsertWithWhereUniqueNestedInput {
  where: PlayerWhereUniqueInput;
  update: PlayerUpdateDataInput;
  create: PlayerCreateInput;
}

export interface PlayerScalarWhereInput {
  _id?: ID_Input;
  _id_not?: ID_Input;
  _id_in?: ID_Input[] | ID_Input;
  _id_not_in?: ID_Input[] | ID_Input;
  _id_lt?: ID_Input;
  _id_lte?: ID_Input;
  _id_gt?: ID_Input;
  _id_gte?: ID_Input;
  _id_contains?: ID_Input;
  _id_not_contains?: ID_Input;
  _id_starts_with?: ID_Input;
  _id_not_starts_with?: ID_Input;
  _id_ends_with?: ID_Input;
  _id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  wins?: Int;
  wins_not?: Int;
  wins_in?: Int[] | Int;
  wins_not_in?: Int[] | Int;
  wins_lt?: Int;
  wins_lte?: Int;
  wins_gt?: Int;
  wins_gte?: Int;
  losses?: Int;
  losses_not?: Int;
  losses_in?: Int[] | Int;
  losses_not_in?: Int[] | Int;
  losses_lt?: Int;
  losses_lte?: Int;
  losses_gt?: Int;
  losses_gte?: Int;
  race?: String;
  race_not?: String;
  race_in?: String[] | String;
  race_not_in?: String[] | String;
  race_lt?: String;
  race_lte?: String;
  race_gt?: String;
  race_gte?: String;
  race_contains?: String;
  race_not_contains?: String;
  race_starts_with?: String;
  race_not_starts_with?: String;
  race_ends_with?: String;
  race_not_ends_with?: String;
  AND?: PlayerScalarWhereInput[] | PlayerScalarWhereInput;
  OR?: PlayerScalarWhereInput[] | PlayerScalarWhereInput;
  NOT?: PlayerScalarWhereInput[] | PlayerScalarWhereInput;
}

export interface PlayerUpdateManyWithWhereNestedInput {
  where: PlayerScalarWhereInput;
  data: PlayerUpdateManyDataInput;
}

export interface PlayerUpdateManyDataInput {
  name?: String;
  wins?: Int;
  losses?: Int;
  race?: String;
}

export interface PlayerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PlayerWhereInput;
  AND?: PlayerSubscriptionWhereInput[] | PlayerSubscriptionWhereInput;
}

export interface PlayerListSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PlayerListWhereInput;
  AND?: PlayerListSubscriptionWhereInput[] | PlayerListSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Player {
  _id: ID_Output;
  name: String;
  wins: Int;
  losses: Int;
  race: String;
}

export interface PlayerPromise extends Promise<Player>, Fragmentable {
  _id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  wins: () => Promise<Int>;
  losses: () => Promise<Int>;
  race: () => Promise<String>;
}

export interface PlayerSubscription
  extends Promise<AsyncIterator<Player>>,
    Fragmentable {
  _id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  wins: () => Promise<AsyncIterator<Int>>;
  losses: () => Promise<AsyncIterator<Int>>;
  race: () => Promise<AsyncIterator<String>>;
}

export interface PlayerConnection {
  pageInfo: PageInfo;
  edges: PlayerEdge[];
}

export interface PlayerConnectionPromise
  extends Promise<PlayerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PlayerEdge>>() => T;
  aggregate: <T = AggregatePlayerPromise>() => T;
}

export interface PlayerConnectionSubscription
  extends Promise<AsyncIterator<PlayerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PlayerEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePlayerSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface PlayerEdge {
  node: Player;
  cursor: String;
}

export interface PlayerEdgePromise extends Promise<PlayerEdge>, Fragmentable {
  node: <T = PlayerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PlayerEdgeSubscription
  extends Promise<AsyncIterator<PlayerEdge>>,
    Fragmentable {
  node: <T = PlayerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePlayer {
  count: Int;
}

export interface AggregatePlayerPromise
  extends Promise<AggregatePlayer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePlayerSubscription
  extends Promise<AsyncIterator<AggregatePlayer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PlayerList {
  id: ID_Output;
}

export interface PlayerListPromise extends Promise<PlayerList>, Fragmentable {
  id: () => Promise<ID_Output>;
  playerList: <T = FragmentableArray<Player>>(
    args?: {
      where?: PlayerWhereInput;
      orderBy?: PlayerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface PlayerListSubscription
  extends Promise<AsyncIterator<PlayerList>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  playerList: <T = Promise<AsyncIterator<PlayerSubscription>>>(
    args?: {
      where?: PlayerWhereInput;
      orderBy?: PlayerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface PlayerListConnection {
  pageInfo: PageInfo;
  edges: PlayerListEdge[];
}

export interface PlayerListConnectionPromise
  extends Promise<PlayerListConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PlayerListEdge>>() => T;
  aggregate: <T = AggregatePlayerListPromise>() => T;
}

export interface PlayerListConnectionSubscription
  extends Promise<AsyncIterator<PlayerListConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PlayerListEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePlayerListSubscription>() => T;
}

export interface PlayerListEdge {
  node: PlayerList;
  cursor: String;
}

export interface PlayerListEdgePromise
  extends Promise<PlayerListEdge>,
    Fragmentable {
  node: <T = PlayerListPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PlayerListEdgeSubscription
  extends Promise<AsyncIterator<PlayerListEdge>>,
    Fragmentable {
  node: <T = PlayerListSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePlayerList {
  count: Int;
}

export interface AggregatePlayerListPromise
  extends Promise<AggregatePlayerList>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePlayerListSubscription
  extends Promise<AsyncIterator<AggregatePlayerList>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PlayerSubscriptionPayload {
  mutation: MutationType;
  node: Player;
  updatedFields: String[];
  previousValues: PlayerPreviousValues;
}

export interface PlayerSubscriptionPayloadPromise
  extends Promise<PlayerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PlayerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PlayerPreviousValuesPromise>() => T;
}

export interface PlayerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PlayerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PlayerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PlayerPreviousValuesSubscription>() => T;
}

export interface PlayerPreviousValues {
  _id: ID_Output;
  name: String;
  wins: Int;
  losses: Int;
  race: String;
}

export interface PlayerPreviousValuesPromise
  extends Promise<PlayerPreviousValues>,
    Fragmentable {
  _id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  wins: () => Promise<Int>;
  losses: () => Promise<Int>;
  race: () => Promise<String>;
}

export interface PlayerPreviousValuesSubscription
  extends Promise<AsyncIterator<PlayerPreviousValues>>,
    Fragmentable {
  _id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  wins: () => Promise<AsyncIterator<Int>>;
  losses: () => Promise<AsyncIterator<Int>>;
  race: () => Promise<AsyncIterator<String>>;
}

export interface PlayerListSubscriptionPayload {
  mutation: MutationType;
  node: PlayerList;
  updatedFields: String[];
  previousValues: PlayerListPreviousValues;
}

export interface PlayerListSubscriptionPayloadPromise
  extends Promise<PlayerListSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PlayerListPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PlayerListPreviousValuesPromise>() => T;
}

export interface PlayerListSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PlayerListSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PlayerListSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PlayerListPreviousValuesSubscription>() => T;
}

export interface PlayerListPreviousValues {
  id: ID_Output;
}

export interface PlayerListPreviousValuesPromise
  extends Promise<PlayerListPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface PlayerListPreviousValuesSubscription
  extends Promise<AsyncIterator<PlayerListPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Player",
    embedded: false
  },
  {
    name: "PlayerList",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
